{"name": "test_vwo_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7CBC41F52+60322]\n\t(No symbol) [0x00007FF7CBBBCEC9]\n\t(No symbol) [0x00007FF7CBA77EBA]\n\t(No symbol) [0x00007FF7CBA4D5A5]\n\t(No symbol) [0x00007FF7CBAF36B7]\n\t(No symbol) [0x00007FF7CBB0B331]\n\t(No symbol) [0x00007FF7CBAEBFC3]\n\t(No symbol) [0x00007FF7CBAB9617]\n\t(No symbol) [0x00007FF7CBABA211]\n\tGetHandleVerifier [0x00007FF7CBF594AD+3301629]\n\tGetHandleVerifier [0x00007FF7CBFA36D3+3605283]\n\tGetHandleVerifier [0x00007FF7CBF99450+3563680]\n\tGetHandleVerifier [0x00007FF7CBCF4326+790390]\n\t(No symbol) [0x00007FF7CBBC750F]\n\t(No symbol) [0x00007FF7CBBC3404]\n\t(No symbol) [0x00007FF7CBBC3592]\n\t(No symbol) [0x00007FF7CBBB2F9F]\n\tBaseThreadInitThunk [0x00007FFA8880257D+29]\n\tRtlUserThreadStart [0x00007FFA8AA8AF28+40]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"17ec47e30ca84fe4bf9d46ebf6094728\")>\n\n    @allure.epic(\"VWO Login Test\")\n    @allure.feature(\"TC#1 - VWO App Positive Test\")\n    @pytest.mark.positive\n    def test_vwo_login_positive(setup):\n        login_page = LoginPage(driver=setup)\n>       login_page.login_to_vwo(usr=\"pyatb3x@wingify.com\", pwd=\"Wingify@1234\")\n\ntests\\vwoLoginTests\\test_vwo_login.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\pageObjects\\pom\\Loginpage.py:55: in login_to_vwo\n    self.get_username().send_keys(usr)\ntests\\pageObjects\\pom\\Loginpage.py:42: in get_username\n    return self.driver.find_element(*LoginPage.username)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B3DD1BEDB0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7CBBB2F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA8880257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA8AA8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7CBC41F52+60322]\nE       \t(No symbol) [0x00007FF7CBBBCEC9]\nE       \t(No symbol) [0x00007FF7CBA77EBA]\nE       \t(No symbol) [0x00007FF7CBA4D5A5]\nE       \t(No symbol) [0x00007FF7CBAF36B7]\nE       \t(No symbol) [0x00007FF7CBB0B331]\nE       \t(No symbol) [0x00007FF7CBAEBFC3]\nE       \t(No symbol) [0x00007FF7CBAB9617]\nE       \t(No symbol) [0x00007FF7CBABA211]\nE       \tGetHandleVerifier [0x00007FF7CBF594AD+3301629]\nE       \tGetHandleVerifier [0x00007FF7CBFA36D3+3605283]\nE       \tGetHandleVerifier [0x00007FF7CBF99450+3563680]\nE       \tGetHandleVerifier [0x00007FF7CBCF4326+790390]\nE       \t(No symbol) [0x00007FF7CBBC750F]\nE       \t(No symbol) [0x00007FF7CBBC3404]\nE       \t(No symbol) [0x00007FF7CBBC3592]\nE       \t(No symbol) [0x00007FF7CBBB2F9F]\nE       \tBaseThreadInitThunk [0x00007FFA8880257D+29]\nE       \tRtlUserThreadStart [0x00007FFA8AA8AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1727102300040, "stop": 1727102300044, "uuid": "2672bc7c-d5ba-466f-8a5f-e5735529dc03", "historyId": "99091ff4f3a54bbba7777a96f0a2fe5e", "testCaseId": "99091ff4f3a54bbba7777a96f0a2fe5e", "fullName": "tests.vwoLoginTests.test_vwo_login#test_vwo_login_positive", "labels": [{"name": "feature", "value": "TC#1 - VWO App Positive Test"}, {"name": "epic", "value": "VWO Login Test"}, {"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login"}, {"name": "host", "value": "LAPTOP-BELRSIMA"}, {"name": "thread", "value": "11372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.test_vwo_login"}]}